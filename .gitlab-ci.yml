# Copyright (c) 2021, NVIDIA CORPORATION & AFFILIATES. All rights reserved.
#
# NVIDIA CORPORATION and its licensors retain all intellectual property
# and proprietary rights in and to this software, related documentation
# and any modifications thereto. Any use, reproduction, disclosure or
# distribution of this software and related documentation without an express
# license agreement from NVIDIA CORPORATION is strictly prohibited.

# Override defaults
# =================
variables:
  RUN_LINTER_BLACK: "false"
  RUN_LINTER_FLAKE8: "false"
  RUN_LINTER_MYPY: "false"

default:
  tags:
    - os-linux
    - arch-amd64
  image: gitlab-master.nvidia.com:5005/srl/scene_synthesizer/ubuntu1804_py37:latest
  interruptible: true
  before_script:
    - echo "Current python version:"
    - python3 --version
    - sudo pip3 install virtualenv
    - virtualenv venv
    - source venv/bin/activate
    - pip3 install -e ".[ci]"
    - echo $(python3 -c "import $CI_PROJECT_NAME; print($CI_PROJECT_NAME.__version__)")
    - git tag
    - echo "Current installed pip packages:"
    - pip3 freeze
    - echo "Current variable values:"
    - export
  cache:
    key: pip-and-npm-global-cache
    paths:
      - "$CI_PROJECT_DIR/.cache/pip"
      - venv
  artifacts:
    expire_in: 90 days

.merge_request_job:
  rules:
    # Execute job in MR context if merging into default branch and MR is not marked Draft
    - if: $CI_MERGE_REQUEST_ID && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_DEFAULT_BRANCH && $CI_MERGE_REQUEST_TITLE !~ /^Draft.*$/
    # Execute job in MR context if NOT merging into default branch and MR is not marked Draft and allow the job to fail
    - if: $CI_MERGE_REQUEST_ID && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME != $CI_DEFAULT_BRANCH && $CI_MERGE_REQUEST_TITLE !~ /^Draft.*$/
      allow_failure: true
    # Execute job when a new commit is pushed to default branch
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

.default_branch_job:
  rules:
    # Execute job when a new commit is pushed to default branch
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

.release_job:
  rules:
    # Execute job when a version tag (e.g. v0...) is created manually and pushed
    - if: $CI_COMMIT_TAG && $CI_COMMIT_TAG =~ /^v[0-9]+\..*$/
  before_script:
    - echo "Current python version:"
    - python3 --version
    - sudo pip3 install -U setuptools
    - sudo pip3 install "setuptools_scm>=6.2"
    - sudo pip3 install build twine
    - echo "Current installed pip packages:"
    - pip3 freeze
    - echo "Current variable values:"
    - export

# Set stage order
# ===============
stages:
  - check
  - generate
  - release

# Define `check` stage jobs
# ========================
run_linter:
  stage: check
  needs: []
  extends:
    - .merge_request_job
  script:
    - if [ $RUN_LINTER_BLACK = "true" ]; then echo "Running black" && black --check --diff .; else echo "Not running black"; fi
    - if [ $RUN_LINTER_FLAKE8 = "true" ]; then echo "Running flake8" && flake8 .; else echo "Not running flake8"; fi
    - if [ $RUN_LINTER_MYPY = "true" ]; then echo "Running mypy" && mypy .; else echo "Not running mypy"; fi


# Define `generate` stage jobs
# ========================
pages:
  stage: generate
  needs: ["run_linter"]
  extends:
    - .default_branch_job
  script:
    - cd docs/
    - python make_docs.py --sphinx --outputdir ../public # Build sphinx documentation
    - cd ..
  artifacts:
    paths:
      - public/html

badge_version:
  stage: generate
  needs: ["run_linter"]
  extends:
    - .default_branch_job
  script:
    - anybadge -l version -v $(python3 -c "import $CI_PROJECT_NAME; print($CI_PROJECT_NAME.__version__)") -f version.svg -c green
  artifacts:
    paths:
      - version.svg

# Define `release` stage jobs
# ===========================
build_package:
  stage: release
  needs: []
  extends:
    - .release_job
  script:
    - sudo python3 -m build --wheel --no-isolation
  artifacts:
    expire_in: never
    when: on_success
    paths:
      - dist/*.whl

upload_package:
  stage: release
  needs:
    - job: build_package
      artifacts: true
  extends:
    - .release_job
  script:
    - TWINE_PASSWORD=${CI_JOB_TOKEN} TWINE_USERNAME=gitlab-ci-token python3 -m twine upload --repository-url ${CI_API_V4_URL}/projects/39931/packages/pypi dist/*.whl

create_release:
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  stage: release
  needs:
    - job: upload_package
    - job: build_package
      artifacts: true
  extends:
    - .release_job
  before_script: []
  script:
    - echo "Creating $CI_COMMIT_TAG release"
  release:
    name: "Release $CI_COMMIT_TAG"
    tag_name: "$CI_COMMIT_TAG"
    ref: "$CI_COMMIT_TAG"
    description: "Release $CI_COMMIT_TAG"
    assets:
        links:
          - name: 'Binary Distribution (bdist wheel)'
            url: '$CI_PROJECT_URL/-/jobs/artifacts/$CI_COMMIT_TAG/browse?job=build_package'
            link_type: 'other'
